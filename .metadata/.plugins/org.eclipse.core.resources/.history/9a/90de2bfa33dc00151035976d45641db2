/**
 * 
 * @author zackh_000
 * @version 1.0
 */
public class Star implements ODESystem {
	
	private double initialMass;
	private double currentMass;
	private double radius;
	private double velocityXA;
	private double velocityY;
	private double velocityMag;
	private double dragForce;
	private double burnRate;
	private double starDensity;
	

	public Star() {
		
	} // end constructor
	
	@Override
	public int getSystemSize() {
		return 2;
	}

	@Override
	public double[] getCurrentValues() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double[] getFunction(double time, double[] values) {
		// TODO Auto-generated method stub
		return null;
	}

	public void setCurrentMass(double time) {
		currentMass = initialMass - time * burnRate;
	} // end setMass Mutator
	
	public void setRadius() {
		double volume = getMass() / starDensity;
		radius = Math.pow(3 * volume / (4 * Math.PI), 1.0 / 3.0);
	} // end setRadius Mutator
	
	private void setVelocityMag() {
		velocityMag = Math.sqrt(velocityXA * velocityXA + velocityY * velocityY);
	} // end setVelocity Mutator
	
	private double setDragForce(double airDensity, double dragCoeff) {
		double velocityMag = getVelocityMag();
		double radius = getRadius();
		double area = Math.PI * radius * radius;
		dragForce = airDensity * velocityMag * velocityMag * area * dragCoeff / 2;
	} // end getDragForce
	
	
	public double getMass() {
		return currentMass;
	} // end getMass Accessor
	
	public double getRadius() {
		return radius;
	} //  end getRadius Accessor
	
	public double getVelocityMag() {
		return velocityMag;
	} // end getVelocityMag Accessor
	
	public double getDragForce() {
		return dragForce;
	} // end getDragForce Accessor


} // end Star class
