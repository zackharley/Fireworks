/**
 * 
 * @author zackh_000
 * @version 1.0
 */
public class Star implements ODESystem {
	
	private double initialMass;
	private double currentMass;
	private double radius;
	private double velocityMag;
	private double dragForce;
	private double burnRate;
	private double starDensity;
	

	public Star() {
		
	} // end constructor
	
	@Override
	public int getSystemSize() {
		return 2;
	}

	@Override
	public double[] getCurrentValues() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double[] getFunction(double time, double[] values) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public 

	public void setCurrentMass(double time) {
		currentMass = initialMass - time * burnRate;
	} // end setMass Mutator
	
	public double getRadius(double time) {
		double volume = getMass() / starDensity;
		return Math.pow(3 * volume / (4 * Math.PI), 1.0 / 3.0);
	} // end setRadius Mutator
	
	public static double getVelocityMag(double vxa, double vy) {
		return Math.sqrt(vxa * vxa + vy * vy);
	} // end getVelocity
	
	public double getDragForce(double time, double vxa, double vy, double airDensity, double dragCoeff) {
		double velocityMag = getVelocityMag(vxa, vy);
		double radius = getRadius(time);
		double area = Math.PI * radius * radius;
		return airDensity * velocityMag * velocityMag * area * dragCoeff / 2;
	} // end getDragForce

} // end Star class
